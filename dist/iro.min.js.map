{"version":3,"file":"iro.min.js","sources":["../src/ui/marker.js","../src/ui/wheel.js","../src/modules/color.js","../src/ui/slider.js","../src/ui/svg.js","../src/modules/stylesheet.js","../src/modules/colorPicker.js","../src/iro.js"],"sourcesContent":["// css class prefix for this element\nvar CLASS_PREFIX = \"iro__marker\";\n\nexport default class marker {\n   /**\n    * @constructor marker UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(svg, opts) {\n    var baseGroup = svg.g({\n      class: CLASS_PREFIX\n    });\n    baseGroup.circle(0, 0, opts.r, {\n      class: CLASS_PREFIX + \"__outer\",\n      fill: \"none\",\n      strokeWidth: 5,\n      stroke: \"#000\",\n    });\n    baseGroup.circle(0, 0, opts.r, {\n      class: CLASS_PREFIX + \"__inner\",\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"#fff\",\n    });\n    this.g = baseGroup;\n  }\n\n  /**\n    * @desc move marker to centerpoint (x, y) and redraw\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n  */\n  move(x, y) {\n    this.g.setTransform(\"translate\", [x, y]);\n  }\n}","import marker from \"ui/marker\";\n\n// css class prefix for this element\nvar CLASS_PREFIX = \"iro__wheel\";\n// Quick references to reused math functions\nvar PI = Math.PI,\n    sqrt = Math.sqrt,\n    abs = Math.abs,\n    round = Math.round;\n\nexport default class wheel {\n  /**\n    * @constructor hue wheel UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(svg, opts) {\n    this._opts = opts;\n    this.type = \"wheel\";\n\n    var cY = opts.cY,\n        cX = opts.cX,\n        r = opts.r,\n        border = opts.border;\n\n    var baseGroup = svg.g({\n      class: CLASS_PREFIX,\n    });\n\n    baseGroup.circle(cX, cY, r + border.w / 2, {\n      class: CLASS_PREFIX + \"__border\",\n      fill: \"#fff\",\n      stroke: border.color,\n      strokeWidth: border.w,\n    });\n\n    var ringGroup = baseGroup.g({\n      class: CLASS_PREFIX + \"__hue\",\n      strokeWidth: r,\n      fill: \"none\",\n    });\n\n    for (var hue = 0; hue < 360; hue++) {\n      ringGroup.arc(cX, cY, r / 2, hue, hue + 1.5, {\n        stroke: \"hsl(\" + (opts.anticlockwise ? 360 - hue : hue) + \",100%,50%)\",\n      });\n    }\n\n    var saturation = baseGroup.circle(cX, cY, r, {\n      class: CLASS_PREFIX + \"__saturation\"\n    });\n\n    saturation.setGradient(\"fill\", svg.gradient(\"radial\", {\n      0: {\n        color: \"#fff\"\n      },\n      100: {\n        color:\"#fff\", \n        opacity: 0\n      },\n    }));\n\n    this._lightness = baseGroup.circle(cX, cY, r, {\n      class: CLASS_PREFIX + \"__lightness\",\n      opacity: 0\n    });\n\n    this.marker = new marker(baseGroup, opts.marker);\n  }\n  /**\n    * @desc updates this element to represent a new color value\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - an object that gives a boolean for each HSV channel, indicating whether ot not that channel has changed\n  */\n  update(color, changes) {\n    var opts = this._opts;\n    var hsv = color.hsv;\n    // If the V channel has changed, redraw the wheel UI with the new value\n    if (changes.v && opts.lightness) {\n      this._lightness.setAttrs({opacity: (1 - hsv.v / 100).toFixed(2) });\n    }\n    // If the H or S channel has changed, move the marker to the right position\n    if (changes.h || changes.s) {\n      // convert the hue value to radians, since we'll use it as an angle\n      var hueAngle = (opts.anticlockwise ? 360 - hsv.h : hsv.h) * (PI / 180);\n      // convert the saturation value to a distance between the center of the ring and the edge\n      var dist = (hsv.s / 100) * opts.rMax;\n      // Move the marker based on the angle and distance\n      this.marker.move(opts.cX + dist * Math.cos(hueAngle), opts.cY + dist * Math.sin(hueAngle));\n    }\n  }\n\n  /**\n    * @desc Takes a point at (x, y) and returns HSV values based on this input -- use this to update a color from mouse input\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Object} - new HSV color values (some channels may be missing)\n  */\n  input(x, y) {\n    var opts = this._opts,\n        rangeMax = opts.rMax,\n        _x = opts.cX - x,\n        _y = opts.cY - y;\n\n    var angle = Math.atan2(_y, _x),\n        // Calculate the hue by converting the angle to radians\n        hue = round(angle * (180 / PI)) + 180,\n        // Find the point's distance from the center of the wheel\n        // This is used to show the saturation level\n        dist = Math.min(sqrt(_x * _x + _y * _y), rangeMax);\n    \n    hue = (opts.anticlockwise ? 360 - hue : hue);\n\n    // Return just the H and S channels, the wheel element doesn't do anything with the L channel\n    return {\n      h: hue,\n      s: round((100 / rangeMax) * dist)\n    };\n  }\n\n  /**\n    * @desc Check if a point at (x, y) is inside this element\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Boolean} - true if the point is a \"hit\", else false\n  */\n  checkHit(x, y) {\n    var opts = this._opts;\n\n    // Check if the point is within the hue ring by comparing the point's distance from the centre to the ring's radius\n    // If the distance is smaller than the radius, then we have a hit\n    var dx = abs(x - opts.cX),\n        dy = abs(y - opts.cY);\n    return sqrt(dx * dx + dy * dy) < opts.r;\n  }\n}","var round = Math.round;\nvar floor = Math.floor;\n\n/**\n  * @desc generic parser for hsl / rgb / etc string\n  * @param {String} str - color string\n  * @param {Array} maxValues - max values for each channel (used for calculating percent-based values)\n  * @return {Array} type (rgb | rgba | hsl | hsla) values for each channel\n*/\nfunction parseColorStr(str, maxValues) {\n  var parsed = str.match(/(\\S+)\\((\\d+)(%?)(?:\\D+?)(\\d+)(%?)(?:\\D+?)(\\d+)(%?)(?:\\D+?)?([0-9\\.]+?)?\\)/i),\n      val1 = parseInt(parsed[2]),\n      val2 = parseInt(parsed[4]),\n      val3 = parseInt(parsed[6]);\n  return [\n    parsed[1],\n    parsed[3] == \"%\" ? val1 / 100 * maxValues[0] : val1,\n    parsed[5] == \"%\" ? val2 / 100 * maxValues[1] : val2,\n    parsed[7] == \"%\" ? val3 / 100 * maxValues[2] : val3,\n    parseFloat(parsed[8]) || undefined\n  ];\n};\n\n/**\n  * @desc convert object / string input to color if necessary\n  * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  * @return {color} color instance\n*/\nfunction getColor(value) {\n  return value instanceof color ? value : new color(value);\n};\n\n/**\n  * @desc clamp value between min and max\n  * @param {Number} value\n  * @param {Number} min\n  * @param {Number} max\n  * @return {Number}\n*/\nfunction clamp(value, min, max) {\n  return value <= min ? min : value >= max ? max : value;\n};\n\n/**\n  * @desc compare values between two objects, returns a object representing changes with true/false values\n  * @param {Object} a\n  * @param {Object} b\n  * @return {Object}\n*/\nfunction compareObjs(a, b) {\n  var changes = {};\n  for (var key in a) changes[key] = b[key] != a[key];\n  return changes;\n};\n\nexport default class color {\n  /**\n    * @constructor color object\n    * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  constructor(value) {\n    // The watch callback function for this color will be stored here\n    this._onChange = false;\n    // The default color value\n    this._value = {h: undefined, s: undefined, v: undefined};\n    if (value) this.set(value);\n  }\n\n  /**\n    * @desc mix two colors\n    * @param {Object | String | color} color1 - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Object | String | color} color2 - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} weight - closer to 0 = more color1, closer to 100 = more color2\n    * @return {color} color instance\n  */\n  static mix(color1, color2, weight) {\n    var rgb1 = getColor(color1).rgb,\n        rgb2 = getColor(color2).rgb;\n    weight = clamp((weight / 100 || 0.5), 0, 1);\n    return new color({\n      r: floor(rgb1.r + (rgb2.r - rgb1.r) * weight),\n      g: floor(rgb1.g + (rgb2.g - rgb1.g) * weight),\n      b: floor(rgb1.b + (rgb2.b - rgb1.b) * weight),\n    });\n  }\n\n  /**\n    * @desc lighten color by amount\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} amount\n    * @return {color} color instance\n  */\n  static lighten(color, amount) {\n    var col = getColor(color),\n        hsv = col.hsv;\n    hsv.v = clamp(hsv.v + amount, 0, 100);\n    col.hsv = hsv;\n    return col;\n  }\n\n  /**\n    * @desc darken color by amount\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} amount\n    * @return {color} color instance\n  */\n  static darken(color, amount) {\n    var col = getColor(color),\n        hsv = col.hsv;\n    hsv.v = clamp(hsv.v - amount, 0, 100);\n    col.hsv = hsv;\n    return col;\n  }\n\n  /**\n    * @desc convert hsv object to rgb\n    * @param {Object} hsv - hsv object\n    * @return {Object} rgb object\n  */\n  static hsv2Rgb(hsv) {\n    var r, g, b, i, f, p, q, t;\n    var h = hsv.h/360, s = hsv.s/100, v = hsv.v/100;\n    i = floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n      case 0: r = v, g = t, b = p; break;\n      case 1: r = q, g = v, b = p; break;\n      case 2: r = p, g = v, b = t; break;\n      case 3: r = p, g = q, b = v; break;\n      case 4: r = t, g = p, b = v; break;\n      case 5: r = v, g = p, b = q; break;\n    }\n    return {r: round(r * 255), g: round(g * 255), b: round(b * 255)};\n  }\n\n  /**\n    * @desc convert rgb object to hsv\n    * @param {Object} rgb - rgb object\n    * @return {Object} hsv object\n  */\n  static rgb2Hsv(rgb) {\n    // Modified from https://github.com/bgrins/TinyColor/blob/master/tinycolor.js#L446\n    var r = rgb.r / 255,\n        g = rgb.g / 255,\n        b = rgb.b / 255,\n        max = Math.max(r, g, b),\n        min = Math.min(r, g, b),\n        delta = max - min,\n        hue;\n    switch (max) {\n      case min: hue = 0; break;\n      case r: hue = (g - b) / delta + (g < b ? 6 : 0); break;\n      case g: hue = (b - r) / delta + 2; break;\n      case b: hue = (r - g) / delta + 4; break;\n    }\n    hue /= 6;\n    return {\n      h: hue * 360,\n      s: max == 0 ? 0 : (delta / max) * 100,\n      v: max * 100\n    };\n  }\n\n  /**\n    * @desc convert hsv object to hsl\n    * @param {Object} hsv - hsv object\n    * @return {Object} hsl object\n  */\n  static hsv2Hsl(hsv) {\n    var s = hsv.s / 100,\n        v = hsv.v / 100;\n    var l = 0.5 * v * (2 - s);\n    s = v * s / (1 - Math.abs(2 * l - 1));\n    return {\n      h: hsv.h,\n      s: s * 100 || 0,\n      l: l * 100\n    };\n  }\n\n  /**\n    * @desc convert hsl object to hsv\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsv object\n  */\n  static hsl2Hsv(hsl) {\n    var s = hsl.s / 100,\n    l = hsl.l / 100;\n    l *= 2;\n    s *= (l <= 1) ? l : 2 - l;\n    return {\n      h: hsl.h,\n      s: ((2 * s) / (l + s)) * 100,\n      v: ((l + s) / 2) * 100\n    };\n  }\n\n  /**\n    * @desc convert hsl object to string\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsl string\n  */\n  static hsl2Str(hsl) {\n    return \"hsl\" + (hsl.a ? \"a\" : \"\") + \"(\" + hsl.h + \", \" + hsl.s + \"%, \" + hsl.l + \"%\" + (hsl.a ? \", \" + hsl.a : \"\") + \")\";\n  }\n\n  /**\n    * @desc convert rgb object to string\n    * @param {Object} rgb - rgb object\n    * @return {Object} rgb string\n  */\n  static rgb2Str(rgb) {\n    return \"rgb\" + (rgb.a ? \"a\" : \"\") + \"(\" + rgb.r + \", \" + rgb.g + \", \" + rgb.b + (rgb.a ? \", \" + rgb.a : \"\") + \")\";\n  }\n\n  /**\n    * @desc convert rgb object to hex string\n    * @param {Object} rgb - rgb object\n    * @return {Object} hex string\n  */\n  static rgb2Hex(rgb) {\n    var str = \"#\";\n    str += rgb.r.toString(16).padStart(2, \"0\");\n    str += rgb.g.toString(16).padStart(2, \"0\");\n    str += rgb.b.toString(16).padStart(2, \"0\");\n    return str;\n  }\n\n  /**\n    * @desc parse hex string\n    * @param {String} str - color string\n    * @return {Object} rgb object\n  */\n  static parseHexStr(hex) {\n    // Strip any \"#\" characters\n    hex = hex.replace(\"#\", \"\");\n    // Prefix the hex string with \"0x\" which indicates a number in hex notation, then convert to an integer\n    var int = parseInt(\"0x\" + hex),\n        // If the length of the input is only 3, then it is a shorthand hex color\n        isShorthand = hex.length == 3,\n        // bitMask for isolating each channel\n        bitMask = isShorthand ? 0xF : 0xFF,\n        // bitLength of each channel (for example, F is 4 bits long while FF is 8 bits long)\n        bitLength = isShorthand ? 4 : 8,\n        // If we're using shorthand notation, multiply each channel by 17\n        multiplier = isShorthand ? 17 : 1;\n    return {\n      r: ((int >> (bitLength * 2)) & bitMask) * multiplier,\n      g: ((int >> bitLength) & bitMask) * multiplier,\n      b: (int & bitMask) * multiplier,\n    };\n  }\n\n  /**\n    * @desc parse hsl string\n    * @param {String} str - color string\n    * @return {Object} hsl object\n  */\n  static parseHslStr(str) {\n    var parsed = parseColorStr(str, [360, 100, 100]);\n    return {\n      h: parsed[2],\n      s: parsed[3],\n      l: parsed[4]\n    };\n  }\n\n  /**\n    * @desc parse rgb string\n    * @param {String} str - color string\n    * @return {Object} rgb object\n  */\n  static parseRgbStr(str) {\n    var parsed = parseColorStr(str, [255, 255, 255]);\n    return {\n      r: parsed[1],\n      g: parsed[2],\n      b: parsed[3]\n    };\n  }\n\n  get hsv() {\n    // _value is cloned to allow changes to be made to the values before passing them back\n    var v = this._value;\n    return {h: v.h, s: v.s, v: v.v};\n  }\n\n  set hsv(newValue) {\n    // If this color is being watched for changes we need to compare the new and old values to check the difference\n    // Otherwise we can just be lazy\n    if (this._onChange) {\n      var oldValue = this._value;\n      for (var channel in oldValue) {\n        if (!newValue.hasOwnProperty(channel)) newValue[channel] = oldValue[channel];\n      }\n      var changes = compareObjs(oldValue, newValue);\n      // Update the old value\n      this._value = newValue;\n      // If the value has changed, call hook callback\n      if (changes.h || changes.s || changes.v) this._onChange(this, changes);\n    } else {\n      this._value = newValue;\n    }\n  }\n\n  get rgb() {\n    var rgb = color.hsv2Rgb(this._value);\n    return {\n      r: round(rgb.r),\n      g: round(rgb.g),\n      b: round(rgb.b),\n    };\n  }\n\n  set rgb(value) {\n    this.hsv = color.rgb2Hsv(value);\n  }\n\n  get hsl() {\n    var hsl = color.hsv2Hsl(this._value);\n    return {\n      h: round(hsl.h),\n      s: round(hsl.s),\n      l: round(hsl.l),\n    };\n  }\n\n  set hsl(value) {\n    this.hsv = color.hsl2Hsv(value);\n  }\n\n  get rgbString() {\n    return color.rgb2Str(this.rgb);\n  }\n\n  set rgbString(value) {\n    this.rgb = color.parseRgbStr(value);\n  }\n\n  get hexString() {\n    return color.rgb2Hex(this.rgb);\n  }\n\n  set hexString(value) {\n    this.rgb = color.parseHexStr(value);\n  }\n\n  get hslString() {\n    return color.hsl2Str(this.hsl);\n  }\n\n  set hslString(value) {\n    this.hsl = color.parseHslStr(value);\n  }\n\n  /**\n    * @desc set the color from any valid value\n    * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  set(value) {\n    if (typeof value == \"object\") {\n      if (value instanceof color) {\n        this.hsv = color.hsv;\n      } else if (\"r\" in value) {\n        this.rgb = value;\n      } else if (\"v\" in value) {\n        this.hsv = value;\n      } else if (\"l\" in value) {\n        this.hsl = value;\n      }\n    } else if (typeof value == \"string\") {\n      if (/^rgb/.test(value)) {\n        this.rgbString = value;\n      } else if (/^hsl/.test(value)) {\n        this.hslString = value;\n      } else if (/^#[0-9A-Fa-f]/.test(value)) {\n        this.hexString = value;\n      }\n    }\n  }\n\n  /**\n    * @desc shortcut to set a specific channel value\n    * @param {String} model - hsv | hsl | rgb\n    * @param {String} channel - individual channel to set, for example if model = hsl, chanel = h | s | l\n    * @param {Number} value - new value for the channel\n  */\n  setChannel(model, channel, value) {\n    var v = this[model];\n    v[channel] = value;\n    this[model] = v;\n  }\n\n  /**\n    * @desc make new color instance with the same value as this one\n    * @return {color}\n  */\n  clone() {\n    return new color(this);\n  }\n\n  /**\n    * @desc compare this color against another, returns a object representing changes with true/false values\n    * @param {Object | String | color} color - color to compare against\n    * @param {String} model - hsv | hsl | rgb\n    * @return {Object}\n  */\n  compare(color, model) {\n    model = model || \"hsv\";\n    return compareObjs(this[model], getColor(color)[model]);\n  }\n\n  /**\n    * @desc mix a color into this one\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} weight - closer to 0 = more current color, closer to 100 = more new color\n  */\n  mix(color, weight) {\n    this.hsv = mix(this, color, weight).hsv;\n  }\n\n  /**\n    * @desc lighten color by amount\n    * @param {Number} amount\n  */\n  lighten(amount) {\n    lighten(this, amount);\n  }\n\n  /**\n    * @desc darken color by amount\n    * @param {Number} amount\n  */\n  darken(amount) {\n    darken(this, amount);\n  }\n}","import marker from \"ui/marker\";\nimport iroColor from \"modules/color\";\n\n// css class prefix for this element\nvar CLASS_PREFIX = \"iro__slider\";\n\nexport default class slider {\n  /**\n    * @constructor slider UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(svg, opts) {\n    var r = opts.r,\n    w = opts.w,\n    h = opts.h,\n    x = opts.x,\n    y = opts.y,\n    borderWidth = opts.border.w;\n  \n    // \"range\" limits how far the slider's marker can travel, and where it stops and starts along the X axis\n    opts.range = {\n      min: x + r,\n      max: (x + w) - r,\n      w: w - (r * 2)\n    };\n  \n    opts.sliderType = opts.sliderType || \"v\";\n  \n    this.type = \"slider\";\n    this._opts = opts;\n  \n    var radius = r + borderWidth / 2;\n  \n    var baseGroup = svg.g({\n      class: CLASS_PREFIX,\n    });\n  \n    var rect = baseGroup.insert(\"rect\", {\n      class: CLASS_PREFIX + \"__value\",\n      rx: radius,\n      ry: radius,\n      x: x - borderWidth / 2,\n      y: y - borderWidth / 2,\n      width: w + borderWidth,\n      height: h + borderWidth,\n      strokeWidth: borderWidth,\n      stroke: opts.border.color,\n    });\n  \n    rect.setGradient(\"fill\", svg.gradient(\"linear\", {\n      0: {color: \"#000\"},\n      100: {color: \"#fff\"}\n    }));\n  \n    this._gradient = rect.gradient;\n  \n    this.marker = new marker(baseGroup, opts.marker);\n  }\n  /**\n    * @desc updates this element to represent a new color value\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - an object that gives a boolean for each HSV channel, indicating whether ot not that channel has changed\n  */\n  update(color, changes) {\n    var opts = this._opts;\n    var range = opts.range;\n    var hsv = color.hsv;\n    var hsl = iroColor.hsv2Hsl({h: hsv.h, s: hsv.s, v: 100});\n    if (opts.sliderType == \"v\") {\n      if (changes.h || changes.s) {\n        this._gradient.stops[1].setAttrs({stopColor: \"hsl(\" + hsl.h + \",\" + hsl.s + \"%,\" + hsl.l + \"%)\"});\n      }\n      if (changes.v) {\n        var percent = (hsv.v / 100);\n        this.marker.move(range.min + (percent * range.w), opts.y + (opts.h / 2));\n      }\n    }\n  }\n\n  /**\n    * @desc Takes a point at (x, y) and returns HSV values based on this input -- use this to update a color from mouse input\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Object} - new HSV color values (some channels may be missing)\n  */\n  input(x, y) {\n    var opts = this._opts;\n    var range = opts.range;\n    var dist = Math.max(Math.min(x, range.max), range.min) - range.min;\n    return {\n      v: Math.round((100 / range.w) * dist),\n    };\n  }\n\n  /**\n    * @desc Check if a point at (x, y) is inside this element\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Boolean} - true if the point is a \"hit\", else false\n  */\n  checkHit(x, y) {\n    var opts = this._opts;\n    return (x > opts.x) && (x < opts.x + opts.w) && (y > opts.y) && (y < opts.y + opts.h);\n  }\n\n}","var GRADIENT_INDEX = 0;\nvar GRADIENT_SUFFIX = \"Gradient\";\nvar SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nvar SVG_ATTRIBUTE_SHORTHANDS = {\n  class: \"class\",\n  stroke: \"stroke\",\n  strokeWidth: \"stroke-width\",\n  fill: \"fill\",\n  opacity: \"opacity\",\n  offset: \"offset\",\n  stopColor: \"stop-color\",\n  stopOpacity: \"stop-opacity\",\n};\n// TODO: figure out why these aren't being compressed properly?\nvar SVG_TRANSFORM_SHORTHANDS = {\n  translate: \"setTranslate\",\n  scale: \"setScale\",\n  rotate: \"setRotate\"\n};\n// sniff useragent string to check if the user is running IE, Edge or Safari\nvar ua = window.navigator.userAgent.toLowerCase();\nvar IS_IE = /msie|trident|edge/.test(ua);\nvar IS_SAFARI = /^((?!chrome|android).)*safari/i.test(ua);\n\nclass svgElement {\n  /**\n    * @constructor svg element wrapper\n    * @param {svgRoot} root - svgRoot object\n    * @param {svgElement | Element} parent - parent node \n    * @param {String} type - element tag name\n    * @param {Object} attrs - element attributes\n  */\n  constructor(root, parent, type, attrs) {\n    var el = document.createElementNS(SVG_NAMESPACE, type);\n    this.el = el;\n    this.setAttrs(attrs);\n    (parent.el || parent).appendChild(el);\n    this._root = root;\n    this._svgTransforms = {};\n    this._transformList = el.transform ? el.transform.baseVal : false;\n  }\n\n  /**\n    * @desc insert a new svgElement\n    * @param {String} type - element tag name\n    * @param {Object} attrs - element attributes\n  */\n  insert(type, attrs) {\n    return new svgElement(this._root, this, type, attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new group svgElement\n    * @param {Object} attrs - element attributes\n  */\n  g(attrs) {\n    return this.insert(\"g\", attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new arc svgElement\n    * @param {Number} cx - arc center x\n    * @param {Number} cy - arc center y\n    * @param {Number} radius - arc radius\n    * @param {Number} startAngle - arc start angle (in degrees)\n    * @param {Number} endAngle - arc end angle (in degrees)\n    * @param {Object} attrs - element attributes\n  */\n  arc(cx, cy, radius, startAngle, endAngle, attrs) {\n    var largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    startAngle *= Math.PI / 180;\n    endAngle *= Math.PI / 180;\n    var x1 = cx + radius * Math.cos(endAngle),\n        y1 = cy + radius * Math.sin(endAngle),\n        x2 = cx + radius * Math.cos(startAngle),\n        y2 = cy + radius * Math.sin(startAngle);\n    attrs = attrs || {};\n    attrs.d = [\"M\", x1, y1, \"A\", radius, radius, 0, largeArcFlag, 0, x2, y2].join(\" \");\n    return this.insert(\"path\", attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new circle svgElement\n    * @param {Number} cx - circle center x\n    * @param {Number} cy - circle center y\n    * @param {Number} radius - circle radius\n    * @param {Object} attrs - element attributes\n  */\n  circle(cx, cy, radius, attrs) {\n    attrs = attrs || {};\n    attrs.cx = cx;\n    attrs.cy = cy;\n    attrs.r = radius;\n    return this.insert(\"circle\", attrs);\n  }\n\n  /**\n    * @desc set a rotate/translate/scale transform on this element\n    * @param {String} type - transform (rotate | translate | scale)\n    * @param {Array} args - transform values\n  */\n  setTransform(type, args) {\n    if (!IS_IE) {  \n      var transform, transformFn;\n      var svgTransforms = this._svgTransforms;\n      if (!svgTransforms[type]) {\n        transform = this._root.el.createSVGTransform();\n        svgTransforms[type] = transform;\n        this._transformList.appendItem(transform);\n      } else {\n        transform = svgTransforms[type];\n      }\n      transformFn = (type in SVG_TRANSFORM_SHORTHANDS) ? SVG_TRANSFORM_SHORTHANDS[type] : type;\n      transform[transformFn].apply(transform, args);\n    } else {\n      // Microsoft still can't make a web browser that actually works, as such, Edge + IE dont implement SVG transforms properly.\n      // We have to force them instead... geez\n      this.setAttrs({\"transform\": type + \"(\" + args.join(\", \") + \")\"});\n    }\n  }\n\n  /**\n    * @desc set attributes on this element\n    * @param {Object} attrs - element attributes\n  */\n  setAttrs(attrs) {\n    for (var attr in attrs) {\n      var name = (attr in SVG_ATTRIBUTE_SHORTHANDS) ? SVG_ATTRIBUTE_SHORTHANDS[attr] : attr;\n      this.el.setAttribute(name, attrs[attr]);\n    }\n  }\n\n  setGradient(attr, gradient) {\n    var attrs = {};\n    attrs[attr] = gradient.getUrl();\n    gradient._refs[attr] = this;\n    this.gradient = gradient;\n    this.setAttrs(attrs);\n  }\n}\n\n\nclass svgGradient {\n  /**\n    * @constructor svg gradient wrapper\n    * @param {svgRoot} root - svgRoot object\n    * @param {String} type - gradient type (linear | radial)\n    * @param {Object} stops - gradient stops = {color, opacity} keyed by offset value\n  */\n  constructor(root, type, stops) {\n    var stopElements = [];\n    var gradient = root._defs.insert(type + GRADIENT_SUFFIX, {\n      id: \"iro\" + GRADIENT_SUFFIX + (GRADIENT_INDEX++)\n    });\n    for (var offset in stops) {\n      var stop = stops[offset];\n      stopElements.push(gradient.insert(\"stop\", {\n        offset: offset + \"%\",\n        stopColor: stop.color,\n        stopOpacity: stop.opacity === undefined ? 1 : stop.opacity,\n      }));\n    }\n    this.el = gradient.el;\n    this.stops = stopElements;\n    this._refs = {};\n  }\n\n  getUrl(base) {\n    var root = IS_SAFARI ? (base || location.protocol + \"//\" + location.host + location.pathname) : \"\";\n    return \"url(\" + root + \"#\" + this.el.id + \")\";\n  }\n}\n\nexport default class svgRoot extends svgElement {\n  /**\n    * @constructor svg root element (inherits svgElement)\n    * @param {svgElement | Element} parent - parent node \n    * @param {Number} width - svg width\n    * @param {Number} height - svg height\n  */\n  constructor(parent, width, height, display) {\n    super(null, parent, \"svg\", {\n      width, \n      height, \n      style: \"display:\" + (display || \"block\") + \";touch-action:none\"\n    });\n    this._root = this;\n    this._defs = this.insert(\"defs\");\n    this._gradients = [];\n  }\n\n  gradient(type, stops) {\n    var gradient = new svgGradient(this, type, stops);\n    this._gradients.push(gradient);\n    return gradient;\n  }\n\n  updateUrls(base) {\n    if (IS_SAFARI) {\n      var gradients = this._gradients;\n      for (var i = 0; i < gradients.length; i++) {\n        for (var key in gradients[i]._refs) {\n          var attrs = {};\n          attrs[key] = gradients[i].getUrl(base);\n          gradients[i]._refs[key].setAttrs(attrs);\n        }\n      }\n    }\n  }\n}","\nexport default class stylesheet {\n  /**\n    @constructor stylesheet writer\n  */\n  constructor() {\n    // Create a new style element\n    let style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    // Webkit apparently requires a text node to be inserted into the style element\n    // (according to https://davidwalsh.name/add-rules-stylesheets)\n    style.appendChild(document.createTextNode(\"\"));\n    this.style = style;\n    // Create a reference to the style element's CSSStyleSheet object\n    // CSSStyleSheet API: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet\n    let sheet = style.sheet;\n    this.sheet = sheet;\n    // Get a reference to the sheet's CSSRuleList object\n    // CSSRuleList API: https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList\n    this.rules = sheet.rules || sheet.cssRules;\n    // We'll store references to all the CSSStyleDeclaration objects that we change here, keyed by the CSS selector they belong to\n    // CSSStyleDeclaration API: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n    this.map = {};\n  }\n\n  get enabled() {\n    return !this.sheet.disabled;\n  }\n\n  set enabled(value) {\n    this.sheet.disabled = !value;\n  }\n\n  // TODO: consider removing cssText + css properties since i don't tink they're that useful\n  get cssText() {\n    var map = this.map;\n    var ret = [];\n    for (var selector in map) {\n      ret.push(selector.replace(/,\\W/g, \",\\n\") + \" {\\n\\t\" + map[selector].cssText.replace(/;\\W/g, \";\\n\\t\") + \"\\n}\");\n    }\n    return ret.join(\"\\n\");\n  }\n  \n  get css() {\n    var map = this.map;\n    var ret = {};\n    for (var selector in map) {\n      var ruleSet = map[selector];\n      ret[selector] = {};\n      for (var i = 0; i < ruleSet.length; i++) {\n        var property = ruleSet[i];\n        ret[selector][property] = ruleSet.getPropertyValue(property);\n      }\n    }\n    return ret;\n  }\n\n  /**\n    * @desc Set a specific rule for a given selector\n    * @param {String} selector - the CSS selector for this rule (e.g. \"body\", \".class\", \"#id\")\n    * @param {String} property - the CSS property to set (e.g. \"background-color\", \"font-family\", \"z-index\")\n    * @param {String} value    - the new value for the rule (e.g. \"rgb(255, 255, 255)\", \"Helvetica\", \"99\")\n  */\n  setRule(selector, property, value) {\n    var sheet = this.sheet;\n    var rules = sheet.rules || sheet.cssRules;\n    var map = this.map;\n    // Convert property from camelCase to snake-case\n    property = property.replace(/([A-Z])/g, function($1) {\n      return \"-\" + $1.toLowerCase();\n    });\n    if (!map.hasOwnProperty(selector)) {\n      // If the selector hasn't been used yet we want to insert the rule at the end of the CSSRuleList, so we use its length as the index value\n      var index = rules.length;\n      // Prepare the rule declaration text, since both insertRule and addRule take this format\n      var declaration = property + \": \" + value;\n      // Insert the new rule into the stylesheet\n      try {\n        // Some browsers only support insertRule, others only support addRule, so we have to use both\n        sheet.insertRule(selector + \" {\" + declaration + \";}\", index);\n      } catch(e) {\n        sheet.addRule(selector, declaration, index);\n      } finally {\n        // Because safari is perhaps the worst browser in all of history, we have to remind it to keep the sheet rules up-to-date\n        rules = sheet.rules || sheet.cssRules;\n        // Add our newly inserted rule's CSSStyleDeclaration object to the internal map\n        map[selector] = rules[index].style;\n      }\n    }\n    else {\n      map[selector].setProperty(property, value);\n    }\n  }\n}","import wheel from \"ui/wheel\";\nimport slider from \"ui/slider\";\nimport svg from \"ui/svg\";\nimport iroColor from \"modules/color\";\nimport iroStyleSheet from \"modules/stylesheet\";\n\nconst EVENT_MOUSEDOWN = \"mousedown\",\n      EVENT_MOUSEMOVE = \"mousemove\",\n      EVENT_MOUSEUP = \"mouseup\",\n      EVENT_TOUCHSTART = \"touchstart\",\n      EVENT_TOUCHMOVE = \"touchmove\",\n      EVENT_TOUCHEND = \"touchend\",\n      EVENT_READYSTATE_CHANGE = \"readystatechange\",\n      READYSTATE_COMPLETE = \"complete\";\n\n/**\n  * @desc listen to one or more events on an element\n  * @param {Element} el target element\n  * @param {Array} eventList the events to listen to\n  * @param {Function} callback the event callback function\n  * @param {Object} params params to pass to addEventListener\n*/\nfunction listen(el, eventList, callback, params={}) {\n  for (var i = 0; i < eventList.length; i++) {\n    el.addEventListener(eventList[i], callback, params);\n  }\n};\n\n/**\n  * @desc remove an event listener on an element\n  * @param {Element} el target element\n  * @param {Array} eventList the events to remove\n  * @param {Function} callback the event callback function\n*/\nfunction unlisten(el, eventList, callback) {\n  for (var i = 0; i < eventList.length; i++) {\n    el.removeEventListener(eventList[i], callback);\n  }\n};\n\n/**\n  * @desc call fn callback when the page document is ready\n  * @param {Function} callback callback function to be called\n*/\nfunction whenReady(callback) {\n  if (document.readyState == READYSTATE_COMPLETE) {\n    callback();\n  }\n  else {\n    listen(document, [EVENT_READYSTATE_CHANGE], function stateChange(e) {\n      if (document.readyState == READYSTATE_COMPLETE) {\n        callback();\n        unlisten(document, [EVENT_READYSTATE_CHANGE], stateChange);\n      }\n    });\n  }\n};\n\n\nexport default class colorPicker {\n  /**\n    * @constructor color wheel object\n    * @param {Element | String} el - a DOM element or the CSS selector for a DOM element to use as a container for the UI\n    * @param {Object} opts - options for this instance\n  */\n  constructor(el, opts) {\n    opts = opts || {};\n    // event storage for `on` and `off`\n    this._events = {};\n    this._mouseTarget = false;\n    this._colorChangeActive = false;\n    this.css = opts.css || opts.styles || undefined;\n    // Wait for the document to be ready, then mount the UI\n    whenReady(() => {this._mount(el, opts)});\n  }\n  /**\n    * @desc mount the color picker UI into the DOM\n    * @param {Element | String} el - a DOM element or the CSS selector for a DOM element to use as a container for the UI\n    * @param {Object} opts - options for this instance\n    * @access protected\n  */\n  _mount(el, opts) {\n    // If `el` is a string, use it to select an Element, else assume it's an element\n    el = (\"string\" == typeof el) ? document.querySelector(el) : el;\n    // Find the width and height for the UI\n    // If not defined in the options, try the HTML width + height attributes of the wrapper, else default to 320\n    var width = opts.width || parseInt(el.width) || 320;\n    var height = opts.height || parseInt(el.height) || 320;\n    // Calculate layout variables\n    var padding = opts.padding + 2 || 6,\n        borderWidth = opts.borderWidth || 0,\n        markerRadius = opts.markerRadius || 8,\n        sliderMargin = opts.sliderMargin || 24,\n        sliderHeight = opts.sliderHeight || markerRadius * 2 + padding * 2 + borderWidth * 2,\n        bodyWidth = Math.min(height - sliderHeight - sliderMargin, width),\n        wheelRadius = bodyWidth / 2 - borderWidth,\n        leftMargin = (width - bodyWidth) / 2;\n    var marker = {\n      r: markerRadius\n    };\n    var borderStyles = {\n      w: borderWidth,\n      color: opts.borderColor || \"#fff\",\n    };\n\n    // Create UI elements\n    this.el = el;\n    this.svg = new svg(el, width, height, opts.display);\n    this.ui = [\n      new wheel(this.svg, {\n        cX: leftMargin + bodyWidth / 2,\n        cY: bodyWidth / 2,\n        r: wheelRadius,\n        rMax: wheelRadius - (markerRadius + padding),\n        marker: marker,\n        border: borderStyles,\n        lightness: opts.wheelLightness == undefined ? true : opts.wheelLightness,\n        anticlockwise: opts.anticlockwise\n      }),\n      new slider(this.svg, {\n        sliderType: \"v\",\n        x: leftMargin + borderWidth,\n        y: bodyWidth + sliderMargin,\n        w: bodyWidth - borderWidth * 2,\n        h: sliderHeight - borderWidth * 2,\n        r: sliderHeight / 2 - borderWidth,\n        marker: marker,\n        border: borderStyles\n      })\n    ];\n    // Create an iroStyleSheet for this colorWheel's CSS overrides\n    this.stylesheet = new iroStyleSheet();\n    // Create an iroColor to store this colorWheel's selected color\n    this.color = new iroColor();\n    // Whenever the selected color changes, trigger a colorWheel update too\n    this.color._onChange = this._update.bind(this);\n    this.color.set(opts.color || opts.defaultValue || \"#fff\")\n    // Hacky workaround for a couple of Safari SVG url bugs\n    // See https://github.com/jaames/iro.js/issues/18\n    // TODO: perhaps make this a seperate plugin, it's hacky and takes up more space than I'm happy with\n    this.on(\"history:stateChange\", (base) => {this.svg.updateUrls(base)});\n    // Listen to events\n    listen(this.svg.el, [EVENT_MOUSEDOWN, EVENT_TOUCHSTART], this, { passive:false });\n    this.emit(\"mount\", this);\n  }\n\n  /**\n    * @desc update the selected color\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - booleans for each HSV channel: true if the new value is different to the old value, else false\n    * @access protected\n  */\n  _update(color, changes) {\n    var rgb = color.rgbString;\n    var css = this.css;\n    // Loop through each UI element and update it\n    for (var i = 0; i < this.ui.length; i++) {\n      this.ui[i].update(color, changes); \n    }\n    // Update the stylesheet too\n    for (var selector in css) {\n      var properties = css[selector];\n      for (var prop in properties) {\n        this.stylesheet.setRule(selector, prop, rgb);\n      }\n    } \n    // Prevent infinite loops if the color is set inside a `color:change` callback\n    if (!this._colorChangeActive) {\n      // While _colorChangeActive = true, this event cannot be fired\n      this._colorChangeActive = true;\n      this.emit(\"color:change\", color, changes);\n      this._colorChangeActive = false;\n    }\n  }\n\n  /**\n    * @desc Set a callback function for an event\n    * @param {String} eventType Name of the event to listen to, pass \"*\" to listen to all events\n    * @param {Function} callback Event callback\n  */\n  on(eventType, callback) {\n    var events = this._events;\n    (events[eventType] || (events[eventType] = [])).push(callback);\n  }\n\n  /**\n    * @desc Remove a callback function for an event added with on()\n    * @param {String} eventType The name of the event\n    * @param {Function} callback The watch callback to remove from the event\n  */\n  off(eventType, callback) {\n    var eventList = this._events[eventType];\n    if (eventList) eventList.splice(eventList.indexOf(callback), 1);\n  }\n\n  /**\n    * @desc Emit an event\n    * @param {String} eventType The name of the event to emit\n    * @param {Array} args array of args to pass to callbacks\n  */\n  emit(eventType, ...args) {\n    var events = this._events,\n        callbackList = (events[eventType] || []).concat((events[\"*\"] || []));\n    for (var i = 0; i < callbackList.length; i++) {\n      callbackList[i].apply(null, args); \n    }\n  }\n\n  /**\n    * @desc DOM event handler\n    * @param {Event} e DOM event (currently either mouse or touch events)\n  */\n  handleEvent(e) {\n    // Detect if the event is a touch event by checking if it has the `touches` property\n    // If it is a touch event, use the first touch input\n    var point = e.touches ? e.changedTouches[0] : e,\n        // Get the screen position of the UI\n        rect = this.svg.el.getBoundingClientRect(),\n        // Convert the screen-space pointer position to local-space\n        x = point.clientX - rect.left,\n        y = point.clientY - rect.top;\n        \n    switch (e.type) {\n      case EVENT_MOUSEDOWN:\n      case EVENT_TOUCHSTART:\n        // Loop through each UI element and check if the point \"hits\" it\n        for (var i = 0; i < this.ui.length; i++) {\n          var uiElement = this.ui[i];\n          // If the element is hit, this means the user has clicked the element and is trying to interact with it\n          if (uiElement.checkHit(x, y)) {\n            // Set an internal reference to the uiElement being interacted with, for other internal event handlers\n            this._mouseTarget = uiElement;\n            // Attach event listeners\n            listen(document, [EVENT_MOUSEMOVE, EVENT_TOUCHMOVE, EVENT_MOUSEUP, EVENT_TOUCHEND], this, { passive:false });\n            // Emit input start event\n            this.emit(\"input:start\", this.color);\n            // Finally, use the position to update the picked color\n            this.color.hsv = this._mouseTarget.input(x, y);\n          }\n        }\n        break;\n      case EVENT_MOUSEMOVE:\n      case EVENT_TOUCHMOVE:\n        // Use the position to update the picker color\n        this.color.hsv = this._mouseTarget.input(x, y);\n        break;\n      case EVENT_MOUSEUP:\n      case EVENT_TOUCHEND:\n        this._mouseTarget = false;\n        this.emit(\"input:end\", this.color);\n        unlisten(document, [EVENT_MOUSEMOVE, EVENT_TOUCHMOVE, EVENT_MOUSEUP, EVENT_TOUCHEND], this);\n        break;\n    }\n    if (this._mouseTarget) {\n      e.preventDefault();\n    }\n  }\n}","import colorPicker from \"modules/colorPicker\";\nimport color from \"modules/color\";\nimport stylesheet from \"modules/stylesheet\";\n\nexport default {\n  Color: color,\n  ColorPicker: colorPicker,\n  Stylesheet: stylesheet,\n  version: process.env.VERSION,\n};\n"],"names":["marker","constructor","svg","opts","baseGroup","g","circle","r","CLASS_PREFIX","move","x","y","setTransform","PI","Math","sqrt","abs","round","wheel","_opts","type","cY","cX","border","w","color","ringGroup","hue","arc","anticlockwise","setGradient","gradient","_lightness","update","changes","this","hsv","v","lightness","setAttrs","toFixed","h","s","hueAngle","dist","rMax","cos","sin","input","angle","atan2","_y","_x","min","rangeMax","checkHit","dx","dy","floor","parseColorStr","str","maxValues","parsed","match","val1","parseInt","val2","val3","parseFloat","undefined","getColor","value","clamp","max","compareObjs","a","b","key","_onChange","_value","set","mix","color1","color2","weight","rgb1","rgb","rgb2","lighten","amount","col","darken","hsv2Rgb","i","f","p","q","t","rgb2Hsv","delta","hsv2Hsl","l","hsl2Hsv","hsl","hsl2Str","rgb2Str","rgb2Hex","toString","padStart","parseHexStr","hex","replace","int","length","isShorthand","bitLength","bitMask","multiplier","parseHslStr","parseRgbStr","prototypeAccessors","newValue","oldValue","channel","hasOwnProperty","rgbString","hexString","hslString","test","setChannel","model","clone","compare","slider","range","sliderType","radius","borderWidth","rect","insert","_gradient","iroColor","stops","percent","GRADIENT_INDEX","SVG_ATTRIBUTE_SHORTHANDS","class","stroke","strokeWidth","fill","opacity","offset","stopColor","stopOpacity","SVG_TRANSFORM_SHORTHANDS","translate","scale","rotate","ua","window","navigator","userAgent","toLowerCase","IS_IE","IS_SAFARI","svgElement","root","parent","attrs","el","document","createElementNS","appendChild","_root","_svgTransforms","_transformList","transform","baseVal","cx","cy","startAngle","endAngle","largeArcFlag","x1","d","y1","x2","y2","join","args","svgTransforms","createSVGTransform","appendItem","apply","attr","name","setAttribute","getUrl","_refs","svgGradient","stopElements","_defs","stop","push","base","location","protocol","host","pathname","id","svgRoot","width","height","display","style","_gradients","updateUrls","gradients","stylesheet","createElement","head","createTextNode","sheet","rules","cssRules","map","enabled","disabled","cssText","ret","selector","css","ruleSet","property","getPropertyValue","setRule","$1","setProperty","index","declaration","insertRule","e","addRule","const","EVENT_READYSTATE_CHANGE","READYSTATE_COMPLETE","listen","eventList","callback","params","addEventListener","unlisten","removeEventListener","colorPicker","_events","_mouseTarget","_colorChangeActive","styles","_mount","readyState","stateChange","querySelector","padding","markerRadius","sliderMargin","sliderHeight","bodyWidth","borderStyles","borderColor","ui","leftMargin","wheelRadius","wheelLightness","iroStyleSheet","_update","bind","defaultValue","on","emit","properties","prop","eventType","events","off","splice","indexOf","concat","callbackList","handleEvent","point","touches","changedTouches","getBoundingClientRect","clientX","left","clientY","top","uiElement","preventDefault","Color","ColorPicker","Stylesheet","version","process"],"mappings":"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"}