code[class*="language-"],
pre[class*="language-"] {
  color: map-get($codeSyntax, color);
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

pre[class*="language-"] code {
  color: map-get($codeSyntax, color);
  background: inherit;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: map-get($codeSyntax, background);
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: map-get($codeSyntax, comment);
}

.token.punctuation {
  color: map-get($codeSyntax, punctuation);
}

.namespace {
  opacity: .7;
}

.token.property,
.token.tag,
.token.constant,
.token.symbol,
.token.deleted {
  color: map-get($codeSyntax, property);
}

.token.boolean,
.token.number {
  color: map-get($codeSyntax, boolean);
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: map-get($codeSyntax, string);
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string,
.token.variable {
  color: map-get($codeSyntax, variable);
}

.token.atrule,
.token.attr-value,
.token.function {
  color: map-get($codeSyntax, atrule);
}

.token.keyword {
  color: map-get($codeSyntax, keyword);
}

.token.regex,
.token.important {
  color: map-get($codeSyntax, regex);
}

.token.important,
.token.bold {
  font-weight: bold;
}
.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}